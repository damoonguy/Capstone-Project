{"ast":null,"code":"const createBlog = async blog => {\n  try {\n    const data = await fetch(\"https://ix-blog-app-2d5c689132cd.herokuapp.com/api/blogs\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: blog\n    });\n    const blogsApiData = await data.json();\n    return blogsApiData.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst getBlogs = async () => {\n  try {\n    const data = await fetch(\"https://ix-blog-app-2d5c689132cd.herokuapp.com/api/blogs\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const blogsApiData = await data.json();\n    return blogsApiData.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst getBlogById = async blogId => {\n  try {\n    const data = await fetch(\"https://ix-blog-app-2d5c689132cd.herokuapp.com/api/blogs/\" + blogId, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const blogsApiData = await data.json();\n    const result = blogsApiData.data.find(x => x.id === blogId ? x : false);\n    return result;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst getBlogsByCategoryId = async categoryId => {\n  try {\n    const data = await fetch(\"https://ix-blog-app-2d5c689132cd.herokuapp.com/api/blogs/category/\" + categoryId, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    let blogsApiData = await data.json();\n    return blogsApiData.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst updateBlog = async blogId => {\n  try {\n    const data = await fetch(\"https://ix-blog-app-2d5c689132cd.herokuapp.com/api/blogs/\" + blogId, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const result = await data.json();\n    return result;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst deleteBlog = async blogId => {\n  try {\n    const data = await fetch(\"https://ix-blog-app-2d5c689132cd.herokuapp.com/api/blogs/\" + blogId, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const result = await data.json();\n    return result;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst blogService = {\n  getBlogs,\n  getBlogsByCategoryId,\n  getBlogById,\n  createBlog,\n  updateBlog,\n  deleteBlog\n};\nexport default blogService;","map":{"version":3,"names":["createBlog","blog","data","fetch","method","headers","body","blogsApiData","json","err","Error","getBlogs","getBlogById","blogId","result","find","x","id","getBlogsByCategoryId","categoryId","updateBlog","deleteBlog","blogService"],"sources":["C:/Users/Michael/OneDrive - stevens.edu/Documents/GitHub/blog-app/Frontend/src/services/blogService.js"],"sourcesContent":["\r\nconst createBlog = async (blog) => {\r\n\r\n    try {\r\n        const data = await fetch(\"https://ix-blog-app-2d5c689132cd.herokuapp.com/api/blogs\", \r\n            { \r\n                method: \"POST\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: blog,\r\n            }\r\n        );\r\n        const blogsApiData = await data.json();\r\n        return blogsApiData.data;\r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\n\r\nconst getBlogs = async () => {\r\n\r\n    try {\r\n        const data = await fetch(\"https://ix-blog-app-2d5c689132cd.herokuapp.com/api/blogs\", \r\n            { \r\n                method: \"GET\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }\r\n        );\r\n        const blogsApiData = await data.json();\r\n        return blogsApiData.data;\r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\nconst getBlogById = async (blogId) => {\r\n\r\n    try {\r\n        const data = await fetch(\"https://ix-blog-app-2d5c689132cd.herokuapp.com/api/blogs/\"+blogId, \r\n            { \r\n                method: \"GET\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }\r\n        );\r\n        const blogsApiData = await data.json();\r\n        const result = blogsApiData.data.find((x) => x.id === blogId ? x : false);\r\n        return result;\r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\n\r\nconst getBlogsByCategoryId = async (categoryId) => {\r\n\r\n\r\n    try {\r\n        const data = await fetch(\"https://ix-blog-app-2d5c689132cd.herokuapp.com/api/blogs/category/\"+categoryId, \r\n            { \r\n                method: \"GET\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }\r\n        );\r\n        let blogsApiData = await data.json();\r\n        return blogsApiData.data;   \r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\nconst updateBlog = async (blogId) => {\r\n\r\n    try {\r\n        const data = await fetch(\"https://ix-blog-app-2d5c689132cd.herokuapp.com/api/blogs/\"+blogId, \r\n            { \r\n                method: \"GET\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }\r\n        );\r\n        const result = await data.json();\r\n        return result;\r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\nconst deleteBlog = async (blogId) => {\r\n\r\n    try {\r\n        const data = await fetch(\"https://ix-blog-app-2d5c689132cd.herokuapp.com/api/blogs/\"+blogId, \r\n            { \r\n                method: \"GET\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }\r\n        );\r\n        const result = await data.json();\r\n        return result;\r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\n\r\nconst blogService = {\r\n    getBlogs, getBlogsByCategoryId, getBlogById, createBlog, updateBlog, deleteBlog\r\n}\r\n\r\nexport default blogService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}