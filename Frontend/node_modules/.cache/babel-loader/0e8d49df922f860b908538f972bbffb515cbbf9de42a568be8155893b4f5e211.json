{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Michael\\\\OneDrive - stevens.edu\\\\Documents\\\\GitHub\\\\blog-app\\\\Frontend\\\\src\\\\pages\\\\Blogs\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Navbar from \"../../components/Navbar\";\nimport Heading from \"../../components/Heading\";\nimport BlogList from \"../../components/BlogList\";\nimport Footer from \"../../components/Footer\";\nimport Loading from \"../../components/Loading\";\nimport CategoriesList from \"../../components/CategoriesList\";\nimport categoriesService from \"../../services/categoriesService\";\nimport blogService from \"../../services/blogService\";\nimport AddEditBlogModal from \"../../components/AddEditBlogModal\";\nimport SuccessToast from \"../../components/SuccessToast\";\nimport ErrorToast from \"../../components/ErrorToast\";\nimport \"../../App.css\";\nimport \"./index.css\";\n\n// Week 1: Import the blogPosts and categories from the dummy-data.json file\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BlogsPage() {\n  _s();\n  let {\n    categoryIdPassed\n  } = useParams();\n  const [blogs, setBlogs] = useState();\n  const [categories, setCategories] = useState();\n  const [addBlog, setAddBlog] = useState();\n  const [loading, setLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const onBlogAddClick = () => {\n    setAddBlog({\n      title: \"Test blog updated\",\n      description: \"Test blog description\",\n      authorId: 1,\n      image: \"https://www.google.com/aclk?sa=l&ai=DChcSEwjKnrq7rLKGAxVUkVAGHVcmDCcYABAKGgJkZw&ase=2&gclid=Cj0KCQjwpNuyBhCuARIsANJqL9NpIPYuUWk6_YQjn41HY1oAxn3mpYBaRWmR5Y2xJ2xVSDf-0q-3s0IaAo5YEALw_wcB&sig=AOD64_2gT_1d5Z7XwUR_XoUL-qMQed_dqw&q=&nis=4&ved=2ahUKEwjDn7K7rLKGAxWpYEEAHW-cCN4Q9pgHegQIEBAS&adurl=\",\n      categoryIds: [\"category 1\", \"category 2\", \"category 3\"],\n      content: [{\n        sectionTitle: \"Intro\",\n        sectionBody: \"Test body\"\n      }, {\n        sectionTitle: \"Body\",\n        sectionBody: \"Test body\"\n      }, {\n        sectionTitle: \"Conclusion\",\n        sectionBody: \"Test body\"\n      }]\n    });\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        let blogPosts;\n        if (!categoryIdPassed) {\n          blogPosts = await blogService.getBlogs();\n        } else {\n          blogPosts = await blogService.getBlogsByCategoryId(categoryIdPassed);\n        }\n        const categoriesData = await categoriesService.fetchCategories();\n        setCategories(categoriesData);\n        setBlogs(blogPosts.data.reverse());\n        setIsSuccess(true);\n        setMessage(blogPosts.message);\n        setLoading(false);\n      } catch (error) {\n        setIsError(true);\n        setMessage(error.message || error);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [categoryIdPassed]);\n  const resetSuccess = () => {\n    setIsSuccess(false);\n    setMessage(\"Blog Successfully Created!\");\n  };\n  const resetError = () => {\n    setIsError(false);\n    setMessage(\"Error: Blog unable to be created.\");\n  };\n\n  // const CategoriesList = ({categoryId}) => {\n\n  //   return categories.map((category) => {\n  //     return categoryId === category.id.toString() ? (\n  //       <Link\n  //         key={category.id}\n  //         to={\"/blogs/\"+category.id}\n  //         style={{ color: \"blue\" }}\n  //         onClick={() => setLoading(true)}\n  //       >\n  //         <p key={category.id}>{category.title}</p>\n  //       </Link>\n  //     ) : (\n  //       <Link\n  //         key={category.id}\n  //         to={\"/blogs/\"+category.id}\n  //         style={{ color: \"black\" }}\n  //         onClick={() => setLoading(true)}\n  //       >\n  //         <p key={category.id}>{category.title}</p>\n  //       </Link>\n  //     );\n  //   });\n  // }\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Heading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scroll-menu\",\n        children: /*#__PURE__*/_jsxDEV(CategoriesList, {\n          categories: categories\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BlogList, {\n        blogPosts: blogs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SuccessToast, {\n      show: isSuccess,\n      message: message,\n      onClose: resetSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ErrorToast, {\n      show: isError,\n      message: message,\n      onClose: resetError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(BlogsPage, \"wTzkHrpl4GjpzL7GHM4snxkvMvw=\", false, function () {\n  return [useParams];\n});\n_c = BlogsPage;\nvar _c;\n$RefreshReg$(_c, \"BlogsPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Link","Navbar","Heading","BlogList","Footer","Loading","CategoriesList","categoriesService","blogService","AddEditBlogModal","SuccessToast","ErrorToast","jsxDEV","_jsxDEV","Fragment","_Fragment","BlogsPage","_s","categoryIdPassed","blogs","setBlogs","categories","setCategories","addBlog","setAddBlog","loading","setLoading","isError","setIsError","isSuccess","setIsSuccess","message","setMessage","onBlogAddClick","title","description","authorId","image","categoryIds","content","sectionTitle","sectionBody","fetchData","blogPosts","getBlogs","getBlogsByCategoryId","categoriesData","fetchCategories","data","reverse","error","resetSuccess","resetError","fileName","_jsxFileName","lineNumber","columnNumber","children","className","show","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Michael/OneDrive - stevens.edu/Documents/GitHub/blog-app/Frontend/src/pages/Blogs/index.js"],"sourcesContent":["import React, { useEffect, useState} from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport Navbar from \"../../components/Navbar\";\r\nimport Heading from \"../../components/Heading\";\r\nimport BlogList from \"../../components/BlogList\";\r\nimport Footer from \"../../components/Footer\";\r\nimport Loading from \"../../components/Loading\";\r\nimport CategoriesList from \"../../components/CategoriesList\";\r\n\r\nimport categoriesService from \"../../services/categoriesService\";\r\nimport blogService from \"../../services/blogService\";\r\nimport AddEditBlogModal from \"../../components/AddEditBlogModal\";\r\nimport SuccessToast from \"../../components/SuccessToast\";\r\nimport ErrorToast from \"../../components/ErrorToast\";\r\n\r\nimport \"../../App.css\";\r\nimport \"./index.css\";\r\n\r\n\r\n\r\n\r\n// Week 1: Import the blogPosts and categories from the dummy-data.json file\r\n\r\n\r\nexport default function BlogsPage() {\r\n\r\n  let { categoryIdPassed } = useParams();\r\n  const [ blogs, setBlogs] = useState();\r\n  const [ categories, setCategories] = useState();\r\n\r\n  const [addBlog, setAddBlog ] = useState();\r\n\r\n  const [ loading, setLoading ] = useState(true);\r\n  const [isError, setIsError] = useState(false);\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n\r\n  const onBlogAddClick = ()=> {\r\n    setAddBlog({\r\n      title: \"Test blog updated\",\r\n      description: \"Test blog description\",\r\n      authorId: 1,\r\n      image: \"https://www.google.com/aclk?sa=l&ai=DChcSEwjKnrq7rLKGAxVUkVAGHVcmDCcYABAKGgJkZw&ase=2&gclid=Cj0KCQjwpNuyBhCuARIsANJqL9NpIPYuUWk6_YQjn41HY1oAxn3mpYBaRWmR5Y2xJ2xVSDf-0q-3s0IaAo5YEALw_wcB&sig=AOD64_2gT_1d5Z7XwUR_XoUL-qMQed_dqw&q=&nis=4&ved=2ahUKEwjDn7K7rLKGAxWpYEEAHW-cCN4Q9pgHegQIEBAS&adurl=\",\r\n      categoryIds: [\r\n          \"category 1\",\r\n          \"category 2\",\r\n          \"category 3\"\r\n      ],\r\n      content: [\r\n          {\r\n              sectionTitle: \"Intro\",\r\n              sectionBody: \"Test body\"\r\n          },\r\n          {\r\n              sectionTitle: \"Body\",\r\n              sectionBody: \"Test body\"\r\n          },\r\n          {\r\n              sectionTitle: \"Conclusion\",\r\n              sectionBody: \"Test body\"\r\n          }\r\n      ]\r\n  })\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        let blogPosts;\r\n        if (!categoryIdPassed) {\r\n          blogPosts = await blogService.getBlogs();\r\n        } else {\r\n          blogPosts = await blogService.getBlogsByCategoryId(categoryIdPassed);\r\n        }\r\n        const categoriesData = await categoriesService.fetchCategories();\r\n        setCategories(categoriesData);\r\n        setBlogs(blogPosts.data.reverse());\r\n        setIsSuccess(true);\r\n        setMessage(blogPosts.message);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setIsError(true);\r\n        setMessage(error.message || error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [categoryIdPassed]);\r\n\r\n  const resetSuccess = () => {\r\n    setIsSuccess(false);\r\n    setMessage(\"Blog Successfully Created!\");\r\n  }\r\n\r\n  const resetError = () => {\r\n    setIsError(false);\r\n    setMessage(\"Error: Blog unable to be created.\");\r\n  }\r\n\r\n\r\n\r\n  // const CategoriesList = ({categoryId}) => {\r\n    \r\n\r\n  //   return categories.map((category) => {\r\n  //     return categoryId === category.id.toString() ? (\r\n  //       <Link\r\n  //         key={category.id}\r\n  //         to={\"/blogs/\"+category.id}\r\n  //         style={{ color: \"blue\" }}\r\n  //         onClick={() => setLoading(true)}\r\n  //       >\r\n  //         <p key={category.id}>{category.title}</p>\r\n  //       </Link>\r\n  //     ) : (\r\n  //       <Link\r\n  //         key={category.id}\r\n  //         to={\"/blogs/\"+category.id}\r\n  //         style={{ color: \"black\" }}\r\n  //         onClick={() => setLoading(true)}\r\n  //       >\r\n  //         <p key={category.id}>{category.title}</p>\r\n  //       </Link>\r\n  //     );\r\n  //   });\r\n  // }\r\n\r\n   if (loading) {\r\n     return <Loading/>\r\n   }\r\n\r\n   return (\r\n    <>\r\n      <Navbar />\r\n      <div className=\"container\">\r\n        <Heading />\r\n        <div className=\"scroll-menu\">\r\n          <CategoriesList categories={categories} />\r\n        </div>\r\n        <BlogList blogPosts={blogs} />\r\n      </div>\r\n      <Footer />\r\n      <SuccessToast\r\n        show={isSuccess}\r\n        message={message}\r\n        onClose={resetSuccess}\r\n      />\r\n      <ErrorToast\r\n        show={isError}\r\n        message={message}\r\n        onClose={resetError}\r\n      />\r\n    </>\r\n  );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AACjD,SAASC,SAAS,EAAEC,IAAI,QAAQ,kBAAkB;AAElD,OAAO,sCAAsC;AAE7C,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,OAAOC,OAAO,MAAM,0BAA0B;AAC9C,OAAOC,QAAQ,MAAM,2BAA2B;AAChD,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,OAAOC,OAAO,MAAM,0BAA0B;AAC9C,OAAOC,cAAc,MAAM,iCAAiC;AAE5D,OAAOC,iBAAiB,MAAM,kCAAkC;AAChE,OAAOC,WAAW,MAAM,4BAA4B;AACpD,OAAOC,gBAAgB,MAAM,mCAAmC;AAChE,OAAOC,YAAY,MAAM,+BAA+B;AACxD,OAAOC,UAAU,MAAM,6BAA6B;AAEpD,OAAO,eAAe;AACtB,OAAO,aAAa;;AAKpB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAGA,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAElC,IAAI;IAAEC;EAAiB,CAAC,GAAGnB,SAAS,CAAC,CAAC;EACtC,MAAM,CAAEoB,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAAC,CAAC;EACrC,MAAM,CAAEuB,UAAU,EAAEC,aAAa,CAAC,GAAGxB,QAAQ,CAAC,CAAC;EAE/C,MAAM,CAACyB,OAAO,EAAEC,UAAU,CAAE,GAAG1B,QAAQ,CAAC,CAAC;EAEzC,MAAM,CAAE2B,OAAO,EAAEC,UAAU,CAAE,GAAG5B,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAAC6B,OAAO,EAAEC,UAAU,CAAC,GAAG9B,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAAC+B,SAAS,EAAEC,YAAY,CAAC,GAAGhC,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACiC,OAAO,EAAEC,UAAU,CAAC,GAAGlC,QAAQ,CAAC,EAAE,CAAC;EAG1C,MAAMmC,cAAc,GAAGA,CAAA,KAAK;IAC1BT,UAAU,CAAC;MACTU,KAAK,EAAE,mBAAmB;MAC1BC,WAAW,EAAE,uBAAuB;MACpCC,QAAQ,EAAE,CAAC;MACXC,KAAK,EAAE,mSAAmS;MAC1SC,WAAW,EAAE,CACT,YAAY,EACZ,YAAY,EACZ,YAAY,CACf;MACDC,OAAO,EAAE,CACL;QACIC,YAAY,EAAE,OAAO;QACrBC,WAAW,EAAE;MACjB,CAAC,EACD;QACID,YAAY,EAAE,MAAM;QACpBC,WAAW,EAAE;MACjB,CAAC,EACD;QACID,YAAY,EAAE,YAAY;QAC1BC,WAAW,EAAE;MACjB,CAAC;IAET,CAAC,CAAC;EACF,CAAC;EAED5C,SAAS,CAAC,MAAM;IACd,MAAM6C,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFhB,UAAU,CAAC,IAAI,CAAC;QAChB,IAAIiB,SAAS;QACb,IAAI,CAACzB,gBAAgB,EAAE;UACrByB,SAAS,GAAG,MAAMnC,WAAW,CAACoC,QAAQ,CAAC,CAAC;QAC1C,CAAC,MAAM;UACLD,SAAS,GAAG,MAAMnC,WAAW,CAACqC,oBAAoB,CAAC3B,gBAAgB,CAAC;QACtE;QACA,MAAM4B,cAAc,GAAG,MAAMvC,iBAAiB,CAACwC,eAAe,CAAC,CAAC;QAChEzB,aAAa,CAACwB,cAAc,CAAC;QAC7B1B,QAAQ,CAACuB,SAAS,CAACK,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;QAClCnB,YAAY,CAAC,IAAI,CAAC;QAClBE,UAAU,CAACW,SAAS,CAACZ,OAAO,CAAC;QAC7BL,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOwB,KAAK,EAAE;QACdtB,UAAU,CAAC,IAAI,CAAC;QAChBI,UAAU,CAACkB,KAAK,CAACnB,OAAO,IAAImB,KAAK,CAAC;QAClCxB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IACDgB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACxB,gBAAgB,CAAC,CAAC;EAEtB,MAAMiC,YAAY,GAAGA,CAAA,KAAM;IACzBrB,YAAY,CAAC,KAAK,CAAC;IACnBE,UAAU,CAAC,4BAA4B,CAAC;EAC1C,CAAC;EAED,MAAMoB,UAAU,GAAGA,CAAA,KAAM;IACvBxB,UAAU,CAAC,KAAK,CAAC;IACjBI,UAAU,CAAC,mCAAmC,CAAC;EACjD,CAAC;;EAID;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEC,IAAIP,OAAO,EAAE;IACX,oBAAOZ,OAAA,CAACR,OAAO;MAAAgD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EACnB;EAEA,oBACC3C,OAAA,CAAAE,SAAA;IAAA0C,QAAA,gBACE5C,OAAA,CAACZ,MAAM;MAAAoD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACV3C,OAAA;MAAK6C,SAAS,EAAC,WAAW;MAAAD,QAAA,gBACxB5C,OAAA,CAACX,OAAO;QAAAmD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACX3C,OAAA;QAAK6C,SAAS,EAAC,aAAa;QAAAD,QAAA,eAC1B5C,OAAA,CAACP,cAAc;UAACe,UAAU,EAAEA;QAAW;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC,CAAC,eACN3C,OAAA,CAACV,QAAQ;QAACwC,SAAS,EAAExB;MAAM;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,eACN3C,OAAA,CAACT,MAAM;MAAAiD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACV3C,OAAA,CAACH,YAAY;MACXiD,IAAI,EAAE9B,SAAU;MAChBE,OAAO,EAAEA,OAAQ;MACjB6B,OAAO,EAAET;IAAa;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC,eACF3C,OAAA,CAACF,UAAU;MACTgD,IAAI,EAAEhC,OAAQ;MACdI,OAAO,EAAEA,OAAQ;MACjB6B,OAAO,EAAER;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB,CAAC;EAAA,eACF,CAAC;AAEP;AAACvC,EAAA,CApIuBD,SAAS;EAAA,QAEJjB,SAAS;AAAA;AAAA8D,EAAA,GAFd7C,SAAS;AAAA,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}