{"ast":null,"code":"const createBlog = async blog => {\n  try {\n    const data = await fetch(\"http://localhost:8000/api/blogs/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: blog\n    });\n    const blogsApiData = await data.json();\n    return blogsApiData.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst getBlogs = async () => {\n  try {\n    const data = await fetch(\"http://localhost:8000/api/blogs\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const blogsApiData = await data.json();\n    return blogsApiData.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst getBlogById = async blogId => {\n  try {\n    const data = await fetch(\"http://localhost:8000/api/blogs/\" + blogId, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const result = await data.json();\n    return result;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst getBlogsByAuthorId = async authorId => {\n  const response = await fetch(\"http://localhost:8000/api/blogs/author/\" + authorId, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    let res = await response.json();\n    throw res;\n  }\n  const responseData = await response.json();\n  return responseData;\n};\nconst getBlogsByCategoryId = async categoryId => {\n  try {\n    const data = await fetch(\"http://localhost:8000/api/blogs/category/\" + categoryId, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    let blogsApiData = await data.json();\n    return blogsApiData.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst updateBlog = async blog => {\n  try {\n    const data = await fetch(\"http://localhost:8000/api/blogs/\" + blog.get(\"id\"), {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: blog\n    });\n    const result = await data.json();\n    return result;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst deleteBlog = async blogId => {\n  try {\n    const data = await fetch(\"https://ix-blog-app-2d5c689132cd.herokuapp.com/api/blogs/\" + blogId, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const result = await data.json();\n    return result;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst blogService = {\n  getBlogs,\n  getBlogsByCategoryId,\n  getBlogById,\n  createBlog,\n  updateBlog,\n  deleteBlog\n};\nexport default blogService;","map":{"version":3,"names":["createBlog","blog","data","fetch","method","headers","body","blogsApiData","json","err","Error","getBlogs","getBlogById","blogId","result","getBlogsByAuthorId","authorId","response","ok","res","responseData","getBlogsByCategoryId","categoryId","updateBlog","get","deleteBlog","blogService"],"sources":["C:/Users/Michael/OneDrive - stevens.edu/Documents/GitHub/blog-app/Frontend/src/services/blogService.js"],"sourcesContent":["\r\nconst createBlog = async (blog) => {\r\n\r\n    try {\r\n        const data = await fetch(\"http://localhost:8000/api/blogs/\", \r\n            { \r\n                method: \"POST\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: blog,\r\n            }\r\n        );\r\n        const blogsApiData = await data.json();\r\n        return blogsApiData.data;\r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\n\r\nconst getBlogs = async () => {\r\n\r\n    try {\r\n        const data = await fetch(\"http://localhost:8000/api/blogs\", \r\n            { \r\n                method: \"GET\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }\r\n        );\r\n        const blogsApiData = await data.json();\r\n        return blogsApiData.data;\r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\nconst getBlogById = async (blogId) => {\r\n\r\n    try {\r\n        const data = await fetch(\"http://localhost:8000/api/blogs/\"+blogId, \r\n            { \r\n                method: \"GET\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }\r\n        );\r\n        const result = await data.json();\r\n        return result;\r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\nconst getBlogsByAuthorId = async (authorId) => {\r\n    const response = await fetch(\r\n      \"http://localhost:8000/api/blogs/author/\" + authorId,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n  \r\n    if (!response.ok) {\r\n      let res = await response.json();\r\n      throw res;\r\n    }\r\n  \r\n    const responseData = await response.json();\r\n    return responseData;\r\n  };\r\n\r\nconst getBlogsByCategoryId = async (categoryId) => {\r\n\r\n\r\n    try {\r\n        const data = await fetch(\"http://localhost:8000/api/blogs/category/\"+categoryId, \r\n            { \r\n                method: \"GET\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }\r\n        );\r\n        let blogsApiData = await data.json();\r\n        return blogsApiData.data;   \r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\nconst updateBlog = async (blog) => {\r\n\r\n    try {\r\n        const data = await fetch(\"http://localhost:8000/api/blogs/\"+blog.get(\"id\"), \r\n            { \r\n                method: \"PUT\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: blog\r\n            }\r\n        );\r\n        const result = await data.json();\r\n        return result;\r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\nconst deleteBlog = async (blogId) => {\r\n\r\n    try {\r\n        const data = await fetch(\"https://ix-blog-app-2d5c689132cd.herokuapp.com/api/blogs/\"+blogId, \r\n            { \r\n                method: \"DELETE\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }\r\n        );\r\n        const result = await data.json();\r\n        return result;\r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\n\r\nconst blogService = {\r\n    getBlogs, getBlogsByCategoryId, getBlogById, createBlog, updateBlog, deleteBlog\r\n}\r\n\r\nexport default blogService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}