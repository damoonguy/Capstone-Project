{"ast":null,"code":"const createBlog = async blog => {\n  try {\n    const data = await fetch(\"http://localhost:5000/api/blogs/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: blog\n    });\n    const blogsApiData = await data.json();\n    return blogsApiData;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst getBlogs = async () => {\n  try {\n    const data = await fetch(\"http://localhost:5000/api/blogs/\", {\n      mode: \"cors\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    console.log(data);\n    const blogsApiData = await data.json();\n    return blogsApiData;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst getBlogById = async blogId => {\n  try {\n    const data = await fetch(\"http://localhost:5000/api/blogs/\" + blogId, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const result = await data.json();\n    return result;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst getBlogsByAuthorId = async authorId => {\n  try {\n    const response = await fetch(\"http://localhost:5000/api/blogs/author/\" + authorId, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const responseData = await response.json();\n    console.log(responseData.message);\n    return responseData;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\nconst getBlogsByCategoryId = async categoryId => {\n  try {\n    const data = await fetch(\"http://localhost:5000/api/blogs/category/\" + categoryId, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const blogsApiData = await data.json();\n    return blogsApiData;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst updateBlog = async blog => {\n  try {\n    const data = await fetch(\"http://localhost:5000/api/blogs/\" + blog.get(\"id\"), {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: blog\n    });\n    const result = await data.json();\n    return result;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst deleteBlog = async blogId => {\n  try {\n    const data = await fetch(\"http://localhost:5000/api/blogs/\" + blogId, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const result = await data.json();\n    return result;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst blogService = {\n  createBlog,\n  getBlogs,\n  getBlogsByCategoryId,\n  getBlogsByAuthorId,\n  getBlogById,\n  updateBlog,\n  deleteBlog\n};\nexport default blogService;","map":{"version":3,"names":["createBlog","blog","data","fetch","method","headers","body","blogsApiData","json","err","Error","getBlogs","mode","console","log","getBlogById","blogId","result","getBlogsByAuthorId","authorId","response","responseData","message","error","getBlogsByCategoryId","categoryId","updateBlog","get","deleteBlog","blogService"],"sources":["C:/Users/Michael/OneDrive - stevens.edu/Documents/GitHub/blog-app/Frontend/src/services/blogService.js"],"sourcesContent":["const createBlog = async (blog) => {\r\n\r\n    try {\r\n        const data = await fetch(\"http://localhost:5000/api/blogs/\", \r\n            { \r\n\r\n                method: \"POST\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: blog\r\n            }\r\n        );\r\n        const blogsApiData = await data.json();\r\n        return blogsApiData;\r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\n\r\nconst getBlogs = async () => {\r\n\r\n\r\n    try {\r\n        const data = await fetch(\"http://localhost:5000/api/blogs/\", \r\n            { \r\n                mode: \"cors\",\r\n                method: \"GET\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }\r\n        );\r\n        console.log(data);\r\n        const blogsApiData = await data.json();\r\n        return blogsApiData;\r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\nconst getBlogById = async (blogId) => {\r\n\r\n    try {\r\n        const data = await fetch(\"http://localhost:5000/api/blogs/\"+blogId, \r\n            { \r\n                method: \"GET\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }\r\n        );\r\n        const result = await data.json();\r\n        return result;\r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\nconst getBlogsByAuthorId = async (authorId) => {\r\n  try {\r\n    const response = await fetch(\"http://localhost:5000/api/blogs/author/\" + authorId,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n    const responseData = await response.json();\r\n    console.log(responseData.message);\r\n    return responseData;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\nconst getBlogsByCategoryId = async (categoryId) => {\r\n\r\n\r\n    try {\r\n        const data = await fetch(\"http://localhost:5000/api/blogs/category/\"+categoryId, \r\n            { \r\n                method: \"GET\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }\r\n        );\r\n        const blogsApiData = await data.json();\r\n        return blogsApiData;   \r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\nconst updateBlog = async (blog) => {\r\n\r\n    try {\r\n        const data = await fetch(\"http://localhost:5000/api/blogs/\"+blog.get(\"id\"), \r\n            { \r\n                method: \"PUT\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: blog\r\n            }\r\n        );\r\n        const result = await data.json();\r\n        return result;\r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\nconst deleteBlog = async (blogId) => {\r\n\r\n    try {\r\n        const data = await fetch(\"http://localhost:5000/api/blogs/\"+blogId, \r\n            { \r\n                method: \"DELETE\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }\r\n        );\r\n        const result = await data.json();\r\n        return result;\r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\n\r\nconst blogService = {\r\n  createBlog,\r\n  getBlogs,\r\n  getBlogsByCategoryId,\r\n  getBlogsByAuthorId,\r\n  getBlogById,\r\n  updateBlog,\r\n  deleteBlog,\r\n};\r\n\r\nexport default blogService;"],"mappings":"AAAA,MAAMA,UAAU,GAAG,MAAOC,IAAI,IAAK;EAE/B,IAAI;IACA,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EACvD;MAEIC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEL;IACV,CACJ,CAAC;IACD,MAAMM,YAAY,GAAG,MAAML,IAAI,CAACM,IAAI,CAAC,CAAC;IACtC,OAAOD,YAAY;EACvB,CAAC,CAAC,OAAOE,GAAG,EAAE;IACV,MAAM,IAAIC,KAAK,CAACD,GAAG,CAAC;EACxB;AACJ,CAAC;AAGD,MAAME,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAGzB,IAAI;IACA,MAAMT,IAAI,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EACvD;MACIS,IAAI,EAAE,MAAM;MACZR,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CACJ,CAAC;IACDQ,OAAO,CAACC,GAAG,CAACZ,IAAI,CAAC;IACjB,MAAMK,YAAY,GAAG,MAAML,IAAI,CAACM,IAAI,CAAC,CAAC;IACtC,OAAOD,YAAY;EACvB,CAAC,CAAC,OAAOE,GAAG,EAAE;IACV,MAAM,IAAIC,KAAK,CAACD,GAAG,CAAC;EACxB;AACJ,CAAC;AAED,MAAMM,WAAW,GAAG,MAAOC,MAAM,IAAK;EAElC,IAAI;IACA,MAAMd,IAAI,GAAG,MAAMC,KAAK,CAAC,kCAAkC,GAACa,MAAM,EAC9D;MACIZ,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CACJ,CAAC;IACD,MAAMY,MAAM,GAAG,MAAMf,IAAI,CAACM,IAAI,CAAC,CAAC;IAChC,OAAOS,MAAM;EACjB,CAAC,CAAC,OAAOR,GAAG,EAAE;IACV,MAAM,IAAIC,KAAK,CAACD,GAAG,CAAC;EACxB;AACJ,CAAC;AAED,MAAMS,kBAAkB,GAAG,MAAOC,QAAQ,IAAK;EAC7C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAAC,yCAAyC,GAAGgB,QAAQ,EAC/E;MACEf,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CACF,CAAC;IACD,MAAMgB,YAAY,GAAG,MAAMD,QAAQ,CAACZ,IAAI,CAAC,CAAC;IAC1CK,OAAO,CAACC,GAAG,CAACO,YAAY,CAACC,OAAO,CAAC;IACjC,OAAOD,YAAY;EACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAM,IAAIb,KAAK,CAACa,KAAK,CAAC;EACxB;AACF,CAAC;AAED,MAAMC,oBAAoB,GAAG,MAAOC,UAAU,IAAK;EAG/C,IAAI;IACA,MAAMvB,IAAI,GAAG,MAAMC,KAAK,CAAC,2CAA2C,GAACsB,UAAU,EAC3E;MACIrB,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CACJ,CAAC;IACD,MAAME,YAAY,GAAG,MAAML,IAAI,CAACM,IAAI,CAAC,CAAC;IACtC,OAAOD,YAAY;EACvB,CAAC,CAAC,OAAOE,GAAG,EAAE;IACV,MAAM,IAAIC,KAAK,CAACD,GAAG,CAAC;EACxB;AACJ,CAAC;AAED,MAAMiB,UAAU,GAAG,MAAOzB,IAAI,IAAK;EAE/B,IAAI;IACA,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,kCAAkC,GAACF,IAAI,CAAC0B,GAAG,CAAC,IAAI,CAAC,EACtE;MACIvB,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEL;IACV,CACJ,CAAC;IACD,MAAMgB,MAAM,GAAG,MAAMf,IAAI,CAACM,IAAI,CAAC,CAAC;IAChC,OAAOS,MAAM;EACjB,CAAC,CAAC,OAAOR,GAAG,EAAE;IACV,MAAM,IAAIC,KAAK,CAACD,GAAG,CAAC;EACxB;AACJ,CAAC;AAED,MAAMmB,UAAU,GAAG,MAAOZ,MAAM,IAAK;EAEjC,IAAI;IACA,MAAMd,IAAI,GAAG,MAAMC,KAAK,CAAC,kCAAkC,GAACa,MAAM,EAC9D;MACIZ,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CACJ,CAAC;IACD,MAAMY,MAAM,GAAG,MAAMf,IAAI,CAACM,IAAI,CAAC,CAAC;IAChC,OAAOS,MAAM;EACjB,CAAC,CAAC,OAAOR,GAAG,EAAE;IACV,MAAM,IAAIC,KAAK,CAACD,GAAG,CAAC;EACxB;AACJ,CAAC;AAGD,MAAMoB,WAAW,GAAG;EAClB7B,UAAU;EACVW,QAAQ;EACRa,oBAAoB;EACpBN,kBAAkB;EAClBH,WAAW;EACXW,UAAU;EACVE;AACF,CAAC;AAED,eAAeC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}