{"ast":null,"code":"const url = \"http://localhost:5000/api/blogs/\";\nconst createBlog = async blog => {\n  try {\n    const data = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: blog\n    });\n    if (!data.ok) {\n      try {\n        let res = await data.json();\n        throw res.message || JSON.stringify(res);\n      } catch (err) {}\n    } else {\n      const blogsApiData = await data.json();\n      return blogsApiData;\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst getBlogs = async () => {\n  try {\n    const data = await fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    console.log(data);\n    const blogsApiData = await data.json();\n    return blogsApiData;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst getBlogById = async blogId => {\n  try {\n    const data = await fetch(url + blogId, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const result = await data.json();\n    return result;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst getBlogsByAuthorId = async authorId => {\n  try {\n    const response = await fetch(url + \"author/\" + authorId, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const responseData = await response.json();\n    console.log(responseData.message);\n    return responseData;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\nconst getBlogsByCategoryId = async categoryId => {\n  try {\n    const data = await fetch(url + \"category/\" + categoryId, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const blogsApiData = await data.json();\n    return blogsApiData;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst updateBlog = async blog => {\n  try {\n    const data = await fetch(url + blog.get(\"id\"), {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: blog\n    });\n    const result = await data.json();\n    return result;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst deleteBlog = async blogId => {\n  try {\n    const data = await fetch(url + blogId, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const result = await data.json();\n    return result;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nconst blogService = {\n  createBlog,\n  getBlogs,\n  getBlogsByCategoryId,\n  getBlogsByAuthorId,\n  getBlogById,\n  updateBlog,\n  deleteBlog\n};\nexport default blogService;","map":{"version":3,"names":["url","createBlog","blog","data","fetch","method","headers","body","ok","res","json","message","JSON","stringify","err","blogsApiData","Error","getBlogs","console","log","getBlogById","blogId","result","getBlogsByAuthorId","authorId","response","responseData","error","getBlogsByCategoryId","categoryId","updateBlog","get","deleteBlog","blogService"],"sources":["C:/Users/Michael/OneDrive - stevens.edu/Documents/GitHub/blog-app/Frontend/src/services/blogService.js"],"sourcesContent":["const url = \"http://localhost:5000/api/blogs/\";\r\n\r\nconst createBlog = async (blog) => {\r\n\r\n    try {\r\n        const data = await fetch(url, \r\n            { \r\n\r\n                method: \"POST\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: blog\r\n            }\r\n        );\r\n        if (!data.ok) {\r\n            try {\r\n                let res = await data.json();\r\n                throw res.message || JSON.stringify(res);\r\n            } catch(err) {\r\n\r\n            }\r\n        } else {\r\n            const blogsApiData = await data.json();\r\n            return blogsApiData;\r\n        }\r\n        \r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\n\r\nconst getBlogs = async () => {\r\n\r\n\r\n    try {\r\n        const data = await fetch(url, \r\n            { \r\n                method: \"GET\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }\r\n        );\r\n        console.log(data);\r\n        const blogsApiData = await data.json();\r\n        return blogsApiData;\r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\nconst getBlogById = async (blogId) => {\r\n\r\n    try {\r\n        const data = await fetch(url+blogId, \r\n            { \r\n                method: \"GET\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }\r\n        );\r\n        const result = await data.json();\r\n        return result;\r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\nconst getBlogsByAuthorId = async (authorId) => {\r\n  try {\r\n    const response = await fetch(url+\"author/\" + authorId,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n    const responseData = await response.json();\r\n    console.log(responseData.message);\r\n    return responseData;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\nconst getBlogsByCategoryId = async (categoryId) => {\r\n\r\n\r\n    try {\r\n        const data = await fetch(url+\"category/\"+categoryId, \r\n            { \r\n                method: \"GET\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }\r\n        );\r\n        const blogsApiData = await data.json();\r\n        return blogsApiData;   \r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\nconst updateBlog = async (blog) => {\r\n\r\n    try {\r\n        const data = await fetch(url+blog.get(\"id\"), \r\n            { \r\n                method: \"PUT\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: blog\r\n            }\r\n        );\r\n        const result = await data.json();\r\n        return result;\r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\nconst deleteBlog = async (blogId) => {\r\n\r\n    try {\r\n        const data = await fetch(url+blogId, \r\n            { \r\n                method: \"DELETE\", \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }\r\n        );\r\n        const result = await data.json();\r\n        return result;\r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n};\r\n\r\n\r\nconst blogService = {\r\n  createBlog,\r\n  getBlogs,\r\n  getBlogsByCategoryId,\r\n  getBlogsByAuthorId,\r\n  getBlogById,\r\n  updateBlog,\r\n  deleteBlog,\r\n};\r\n\r\nexport default blogService;"],"mappings":"AAAA,MAAMA,GAAG,GAAG,kCAAkC;AAE9C,MAAMC,UAAU,GAAG,MAAOC,IAAI,IAAK;EAE/B,IAAI;IACA,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAACJ,GAAG,EACxB;MAEIK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEL;IACV,CACJ,CAAC;IACD,IAAI,CAACC,IAAI,CAACK,EAAE,EAAE;MACV,IAAI;QACA,IAAIC,GAAG,GAAG,MAAMN,IAAI,CAACO,IAAI,CAAC,CAAC;QAC3B,MAAMD,GAAG,CAACE,OAAO,IAAIC,IAAI,CAACC,SAAS,CAACJ,GAAG,CAAC;MAC5C,CAAC,CAAC,OAAMK,GAAG,EAAE,CAEb;IACJ,CAAC,MAAM;MACH,MAAMC,YAAY,GAAG,MAAMZ,IAAI,CAACO,IAAI,CAAC,CAAC;MACtC,OAAOK,YAAY;IACvB;EAEJ,CAAC,CAAC,OAAOD,GAAG,EAAE;IACV,MAAM,IAAIE,KAAK,CAACF,GAAG,CAAC;EACxB;AACJ,CAAC;AAGD,MAAMG,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAGzB,IAAI;IACA,MAAMd,IAAI,GAAG,MAAMC,KAAK,CAACJ,GAAG,EACxB;MACIK,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CACJ,CAAC;IACDY,OAAO,CAACC,GAAG,CAAChB,IAAI,CAAC;IACjB,MAAMY,YAAY,GAAG,MAAMZ,IAAI,CAACO,IAAI,CAAC,CAAC;IACtC,OAAOK,YAAY;EACvB,CAAC,CAAC,OAAOD,GAAG,EAAE;IACV,MAAM,IAAIE,KAAK,CAACF,GAAG,CAAC;EACxB;AACJ,CAAC;AAED,MAAMM,WAAW,GAAG,MAAOC,MAAM,IAAK;EAElC,IAAI;IACA,MAAMlB,IAAI,GAAG,MAAMC,KAAK,CAACJ,GAAG,GAACqB,MAAM,EAC/B;MACIhB,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CACJ,CAAC;IACD,MAAMgB,MAAM,GAAG,MAAMnB,IAAI,CAACO,IAAI,CAAC,CAAC;IAChC,OAAOY,MAAM;EACjB,CAAC,CAAC,OAAOR,GAAG,EAAE;IACV,MAAM,IAAIE,KAAK,CAACF,GAAG,CAAC;EACxB;AACJ,CAAC;AAED,MAAMS,kBAAkB,GAAG,MAAOC,QAAQ,IAAK;EAC7C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMrB,KAAK,CAACJ,GAAG,GAAC,SAAS,GAAGwB,QAAQ,EACnD;MACEnB,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CACF,CAAC;IACD,MAAMoB,YAAY,GAAG,MAAMD,QAAQ,CAACf,IAAI,CAAC,CAAC;IAC1CQ,OAAO,CAACC,GAAG,CAACO,YAAY,CAACf,OAAO,CAAC;IACjC,OAAOe,YAAY;EACrB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIX,KAAK,CAACW,KAAK,CAAC;EACxB;AACF,CAAC;AAED,MAAMC,oBAAoB,GAAG,MAAOC,UAAU,IAAK;EAG/C,IAAI;IACA,MAAM1B,IAAI,GAAG,MAAMC,KAAK,CAACJ,GAAG,GAAC,WAAW,GAAC6B,UAAU,EAC/C;MACIxB,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CACJ,CAAC;IACD,MAAMS,YAAY,GAAG,MAAMZ,IAAI,CAACO,IAAI,CAAC,CAAC;IACtC,OAAOK,YAAY;EACvB,CAAC,CAAC,OAAOD,GAAG,EAAE;IACV,MAAM,IAAIE,KAAK,CAACF,GAAG,CAAC;EACxB;AACJ,CAAC;AAED,MAAMgB,UAAU,GAAG,MAAO5B,IAAI,IAAK;EAE/B,IAAI;IACA,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAACJ,GAAG,GAACE,IAAI,CAAC6B,GAAG,CAAC,IAAI,CAAC,EACvC;MACI1B,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEL;IACV,CACJ,CAAC;IACD,MAAMoB,MAAM,GAAG,MAAMnB,IAAI,CAACO,IAAI,CAAC,CAAC;IAChC,OAAOY,MAAM;EACjB,CAAC,CAAC,OAAOR,GAAG,EAAE;IACV,MAAM,IAAIE,KAAK,CAACF,GAAG,CAAC;EACxB;AACJ,CAAC;AAED,MAAMkB,UAAU,GAAG,MAAOX,MAAM,IAAK;EAEjC,IAAI;IACA,MAAMlB,IAAI,GAAG,MAAMC,KAAK,CAACJ,GAAG,GAACqB,MAAM,EAC/B;MACIhB,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CACJ,CAAC;IACD,MAAMgB,MAAM,GAAG,MAAMnB,IAAI,CAACO,IAAI,CAAC,CAAC;IAChC,OAAOY,MAAM;EACjB,CAAC,CAAC,OAAOR,GAAG,EAAE;IACV,MAAM,IAAIE,KAAK,CAACF,GAAG,CAAC;EACxB;AACJ,CAAC;AAGD,MAAMmB,WAAW,GAAG;EAClBhC,UAAU;EACVgB,QAAQ;EACRW,oBAAoB;EACpBL,kBAAkB;EAClBH,WAAW;EACXU,UAAU;EACVE;AACF,CAAC;AAED,eAAeC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}